{"ast":null,"code":"var _jsxFileName = \"C:\\\\Jerry's stuff\\\\Hackathon\\\\yikers_mane\\\\src\\\\components\\\\viewgraphs.jsx\";\n//import React, { Component } from 'react';\n//import { ReactComponent } from '*.svg';\nimport React, { Component } from 'react';\nimport CanvasJSReact from '../canvasjs.react'; //var CanvasJSReact = require('./canvasjs.react');\n\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nlet dataPoints = [];\nimport Chart from \"chart.js\";\nimport classes from \"./LineGraph.module.css\";\nexport default class LineGraph extends Component {\n  constructor(...args) {\n    super(...args);\n    this.chartRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const myChartRef = this.chartRef.current.getContext(\"2d\");\n    new Chart(myChartRef, {\n      type: \"line\",\n      data: {\n        //Bring in data\n        labels: [\"Jan\", \"Feb\", \"March\"],\n        datasets: [{\n          label: \"Sales\",\n          data: [86, 67, 91]\n        }]\n      },\n      options: {//Customize chart options\n      }\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: classes.graphContainer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"myChart\",\n      ref: this.chartRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }));\n  }\n\n} // classroom: [\n//     {\n//         id: 12312,\n//         myClassName: \"Class mane\",\n//         mentor: \"Joe Mentor\",\n//         students: [\n//             {\n//                 student: \"Billy Bob\",\n//                 averageGrade: \"94\",\n//                 assignments: [\n//                     {\n//                         assignmentName: \"homework 1\",\n//                         assignmentGrade: 94\n//                     }\n//                 ]\n//             },\n//             {\n//                 student: \"Billy Bob Joe\",\n//                 averageGrade: \"50\",\n//                 assignments: [\n//                     {\n//                         assignmentName: \"homework 1\",\n//                         assignmentGrade: 50\n//                     }\n//                 ]\n//             },\n//             {\n//                 student: \"John Bob Joe\",\n//                 averageGrade: \"120\",\n//                 assignments: [\n//                     {\n//                         assignmentName: \"homework 1\",\n//                         assignmentGrade: 120\n//                     }\n//                 ]\n//             }\n//         ]\n//     }\n// ]\n// const Graphs = (props) => {\n//     const options = {\n//         title: {\n//             text: \"Basic Column Chart in React\"\n//         },\n//         data: [{\n//             type: \"column\",\n//             dataPoints: [\n//                 { label: \"Apple\", y: 10 },\n//                 { label: \"Orange\", y: 15 },\n//                 { label: \"Banana\", y: 25 },\n//                 { label: \"Mango\", y: 30 },\n//                 { label: \"Grape\", y: 28 }\n//             ]\n//         }]\n//     }\n//     const options2 = {\n//         title: {\n//             text: \"Basic Column Chart in React\"\n//         },\n//         data: [{\n//             type: \"column\",\n//             dataPoints: [\n//                 { label: \"Chicken\", y: 10 },\n//                 { label: \"Alfredo\", y: 15 },\n//                 { label: \"Chicken\", y: 25 },\n//                 { label: \"Alfredo\", y: 30 },\n//                 { label: \"hahah\", y: 28 }\n//             ]\n//         }]\n//     }\n//     const options3 = {\n//         title: {\n//             text: \"Basic Column Chart in React\"\n//         },\n//         data: [{\n//             type: \"column\",\n//             dataPoints: [\n//                 { label: \"mane\", y: 10 },\n//                 { label: \"nei thry\", y: 15 },\n//                 { label: \"looordie\", y: 25 },\n//                 { label: \"yes\", y: 30 },\n//                 { label: \"ok\", y: 28 }\n//             ]\n//         }]\n//     }\n//     const options4 = {\n//         title: {\n//             text: \"Basic Column Chart in React\"\n//         },\n//         data: [{\n//             type: \"column\",\n//             dataPoints: [\n//                 { label: \"no link\", y: 10 },\n//                 { label: \"i wish this worked\", y: 15 },\n//                 { label: \"scik\", y: 25 },\n//                 { label: \"ifwo\", y: 30 },\n//                 { label: \"asdfasd\", y: 28 }\n//             ]\n//         }]\n//     }\n//     const graph1 = () => {\n//         return (\n//             <div>\n//                 <CanvasJSChart options={this.options1} />\n//             </div>\n//         );\n//     }\n//     const graph2 = () => {\n//         return (\n//             <div>\n//                 <CanvasJSChart options={options2} />\n//             </div>\n//         );\n//     }\n//     const graph3 = () => {\n//         return (\n//             <div>\n//                 <CanvasJSChart options={options3} />\n//             </div>\n//         );\n//     }\n//     const graph4 = () => {\n//         return (\n//             <div>\n//                 <CanvasJSChart options={options4} />\n//             </div>\n//         );\n//     }\n//     const a = 10;\n// }\n// export default Graphs;\n// gradeVStudentPS() {\n//     let titleParam = \"Student's Average Grade Over Time\";\n//     let graphTypeParam = \"line\";\n//     let xAxisUnit = \"Assignment\";\n//     let yAxisUnit = \"Average Grade\";\n//     let chart = this.chart;\n//     fetch(\"Our jason file\")\n//         .then(function (response) {\n//             return response.json();\n//         })\n//         .then(function (data) {\n//             for (let i = 0; i < data.classroom.students.assignments.assignmentName.length; i++) {\n//                 dataPoints.push({\n//                     x: data.classroom.students.assignments[i].assignmentName,\n//                     y: data.classroom.students.assignments[i].assignmentGrade\n//                 });\n//             }\n//             chart.render();\n//         });\n// }\n// avgGradeVsAssignment() {\n//     let titleParam = \"Average Grade Per Assignment\";\n//     let graphTypeParam = \"column\";\n//     let xAxisUnit = \"Assignment\";\n//     let yAxisUnit = \"Average Grade\";\n//     let chart = this.chart;\n//     fetch(\"Our jason file\")\n//         .then(function (response) {\n//             return response.json();\n//         })\n//         .then(function (data) {\n//             for (let i = 0; i < data.classroom.students.assignments.length; i++) {\n//                 let avgAssignGrade = 0;\n//                 for (let j = 0; j < data.classroom.students[j].length; i++) {\n//                     avgAssignGrade += data.classroom.students[j].assignements[i].assignmentGrade;\n//                 }\n//                 avgAssignGrade = avgAssignGrade / data.classroom.students.length;\n//                 dataPoints.push({\n//                     x: data.classroom.students.assignments[i].assignmentName,\n//                     y: avgGrade\n//                 });\n//             }\n//             chart.render();\n//         });\n// }\n// avgGradeVsClasses() {\n//     let titleParam = \"Average Grade Per Class\";\n//     let graphTypeParam = \"column\";\n//     let xAxisUnit = \"Class\";\n//     let yAxisUnit = \"Average Grade\";\n//     let chart = this.chart;\n//     fetch(\"Our jason file\")\n//         .then(function (response) {\n//             return response.json();\n//         })\n//         .then(function (data) {\n//             for (let i = 0; i < data.classroom.length; i++) {\n//                 let avgClassGrade = 0;\n//                 for (let j = 0; j < data.classroom[i].students.length; j++) {\n//                     avgClassGrade += data.classroom[i].students[j].averageGrade;\n//                 }\n//                 avgClassGrade = avgClassGrade / data.classroom[i].students;\n//                 dataPoints.push({\n//                     x: data.classroom[i].myClassName,\n//                     y: avgClassGrade\n//                 });\n//             }\n//             chart.render();\n//         });\n// };\n// improtantn\n// let chart = new CanvasJS.Chart(\"chartContainer\", {\n//     animationEnabled: true,\n//     theme: \"light\",\n//     title: {\n//         text: titleParam\n//     },\n//       axisX: {\n//         title: xAxisUnit,\n//     },\n//     axisY: {\n//         title: yAxisUnit,\n//     },\n//     data: [{\n//         type: graphTypeParam,\n//         yValueFormatString: \"#,### Units\",\n//         dataPoints: dataPoints\n//     }]\n// });\n// $.getJSON(/*\"How do i get this file from form.jsx lol?\"*/\"\", addData);\n// function gradeVStudentPS () {\n//     let titleParam = \"Student's Average Grade Over Time\";\n//     let graphTypeParam = \"line\";\n//     let xAxisUnit = \"Assignment\";\n//     let yAxisUnit = \"Average Grade\";\n//     function addData(data) {\n//         for (let i = 0; i < data.classroom.students.assignments.assignmentName.length; i++) {\n//             dataPoints.push({\n//                 x: data.classroom.students.assignments[i].assignmentName,\n//                 y: data.classroom.students.assignments[i].assignmentGrade\n//             });\n//         }\n//         chart.render();\n//     }\n// }\n// function avgGradeVsAssignment () {\n//     let titleParam = \"Average Grade Per Assignment\";\n//     let graphTypeParam = \"column\";\n//     let xAxisUnit = \"Assignment\";\n//     let yAxisUnit = \"Average Grade\";\n//     function addData(data) {\n//         for (let i = 0; i < data.classroom.students.assignments.length; i++) {\n//             let avgAssignGrade = 0;\n//             for(let j = 0; j < data.classroom.students[j].length; i++){\n//                 avgAssignGrade += data.classroom.students[j].assignements[i].assignmentGrade;\n//             }\n//             avgAssignGrade = avgAssignGrade / data.classroom.students.length;\n//             dataPoints.push({\n//                 x: data.classroom.students.assignments[i].assignmentName,\n//                 y: avgGrade\n//             });\n//         }\n//         chart.render();\n//     }\n// }\n// function avgGradeVsClasses () {\n//     let titleParam = \"Average Grade Per Class\";\n//     let graphTypeParam = \"column\";\n//     let xAxisUnit = \"Class\";\n//     let yAxisUnit = \"Average Grade\";\n//     function addData(data) {\n//         for (let i = 0; i < data.classroom.length; i++) {\n//             let avgClassGrade = 0;\n//             for(let j = 0; j < data.classroom[i].students.length; j++) {\n//                 avgClassGrade += data.classroom[i].students[j].averageGrade;\n//             }\n//             avgClassGrade = avgClassGrade / data.classroom[i].students;\n//             dataPoints.push({\n//                 x: data.classroom[i].myClassName,\n//                 y: avgClassGrade\n//             });\n//         }\n//         chart.render();\n//     }\n// }\n// function avgGradeOfAll () {\n//     let titleParam = \"Class' Average Grade Over Time\";\n//     let graphTypeParam = \"line\";\n//     let xAxisUnit = \"Assignment\";\n//     let yAxisUnit = \"Average Grade\";\n//     function addData(data) {\n//         for (let i = 0; i < data.classroom.students.assigments.length; i++) {\n//             let avgClassGrade = 0;\n//             for(let j = 0; j < data.classroom.students.length; i++) {\n//                 avgClassGrade += data.classroom.students.assigments[i].assignmentGrade;\n//             }\n//             avgClassGrade = avgClassGrade / data.classroom.students.length;\n//             dataPoints.push({\n//                 x: data.classroom.students.assigments[i].assignmentName,\n//                 y: avgClassGrade\n//             });\n//         }\n//         chart.render();\n//     }\n// }\n// this function will make the graphs for all of the above functions (just call them lmao)\n// function allGraphs () { \n//     gradeVStudentPS();\n//     avgGradeVsAssignment();\n//     avgGradeVsClasses();\n//     avgGradeOfAll();\n// }","map":{"version":3,"sources":["C:/Jerry's stuff/Hackathon/yikers_mane/src/components/viewgraphs.jsx"],"names":["React","Component","CanvasJSReact","CanvasJS","CanvasJSChart","dataPoints","Chart","classes","LineGraph","chartRef","createRef","componentDidMount","myChartRef","current","getContext","type","data","labels","datasets","label","options","render","graphContainer"],"mappings":";AAAA;AACA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,aAAP,MAA0B,mBAA1B,C,CACA;;AACA,IAAIC,QAAQ,GAAGD,aAAa,CAACC,QAA7B;AACA,IAAIC,aAAa,GAAGF,aAAa,CAACE,aAAlC;AACA,IAAIC,UAAU,GAAG,EAAjB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AAEA,eAAe,MAAMC,SAAN,SAAwBP,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAC7CQ,QAD6C,GAClCT,KAAK,CAACU,SAAN,EADkC;AAAA;;AAG7CC,EAAAA,iBAAiB,GAAG;AAChB,UAAMC,UAAU,GAAG,KAAKH,QAAL,CAAcI,OAAd,CAAsBC,UAAtB,CAAiC,IAAjC,CAAnB;AAEA,QAAIR,KAAJ,CAAUM,UAAV,EAAsB;AAClBG,MAAAA,IAAI,EAAE,MADY;AAElBC,MAAAA,IAAI,EAAE;AACF;AACAC,QAAAA,MAAM,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,OAAf,CAFN;AAGFC,QAAAA,QAAQ,EAAE,CACN;AACIC,UAAAA,KAAK,EAAE,OADX;AAEIH,UAAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT;AAFV,SADM;AAHR,OAFY;AAYlBI,MAAAA,OAAO,EAAE,CACL;AADK;AAZS,KAAtB;AAgBH;;AACDC,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,SAAS,EAAEd,OAAO,CAACe,cAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AACI,MAAA,EAAE,EAAC,SADP;AAEI,MAAA,GAAG,EAAE,KAAKb,QAFd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,CADJ;AAQH;;AAhC4C,C,CAmCjsourcesContent":["//import React, { Component } from 'react';\r\n//import { ReactComponent } from '*.svg';\r\n\r\nimport React, { Component } from 'react';\r\nimport CanvasJSReact from '../canvasjs.react';\r\n//var CanvasJSReact = require('./canvasjs.react');\r\nvar CanvasJS = CanvasJSReact.CanvasJS;\r\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\r\nlet dataPoints = [];\r\nimport Chart from \"chart.js\";\r\nimport classes from \"./LineGraph.module.css\";\r\n\r\nexport default class LineGraph extends Component {\r\n    chartRef = React.createRef();\r\n    \r\n    componentDidMount() {\r\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\r\n        \r\n        new Chart(myChartRef, {\r\n            type: \"line\",\r\n            data: {\r\n                //Bring in data\r\n                labels: [\"Jan\", \"Feb\", \"March\"],\r\n                datasets: [\r\n                    {\r\n                        label: \"Sales\",\r\n                        data: [86, 67, 91],\r\n                    }\r\n                ]\r\n            },\r\n            options: {\r\n                //Customize chart options\r\n            }\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={classes.graphContainer}>\r\n                <canvas\r\n                    id=\"myChart\"\r\n                    ref={this.chartRef}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// classroom: [\r\n//     {\r\n//         id: 12312,\r\n//         myClassName: \"Class mane\",\r\n//         mentor: \"Joe Mentor\",\r\n//         students: [\r\n//             {\r\n//                 student: \"Billy Bob\",\r\n//                 averageGrade: \"94\",\r\n//                 assignments: [\r\n//                     {\r\n//                         assignmentName: \"homework 1\",\r\n//                         assignmentGrade: 94\r\n//                     }\r\n//                 ]\r\n//             },\r\n//             {\r\n//                 student: \"Billy Bob Joe\",\r\n//                 averageGrade: \"50\",\r\n//                 assignments: [\r\n//                     {\r\n//                         assignmentName: \"homework 1\",\r\n//                         assignmentGrade: 50\r\n//                     }\r\n//                 ]\r\n//             },\r\n//             {\r\n//                 student: \"John Bob Joe\",\r\n//                 averageGrade: \"120\",\r\n//                 assignments: [\r\n//                     {\r\n//                         assignmentName: \"homework 1\",\r\n//                         assignmentGrade: 120\r\n//                     }\r\n//                 ]\r\n//             }\r\n//         ]\r\n//     }\r\n// ]\r\n\r\n\r\n// const Graphs = (props) => {\r\n//     const options = {\r\n//         title: {\r\n//             text: \"Basic Column Chart in React\"\r\n//         },\r\n//         data: [{\r\n//             type: \"column\",\r\n//             dataPoints: [\r\n//                 { label: \"Apple\", y: 10 },\r\n//                 { label: \"Orange\", y: 15 },\r\n//                 { label: \"Banana\", y: 25 },\r\n//                 { label: \"Mango\", y: 30 },\r\n//                 { label: \"Grape\", y: 28 }\r\n//             ]\r\n//         }]\r\n//     }\r\n\r\n//     const options2 = {\r\n//         title: {\r\n//             text: \"Basic Column Chart in React\"\r\n//         },\r\n//         data: [{\r\n//             type: \"column\",\r\n//             dataPoints: [\r\n//                 { label: \"Chicken\", y: 10 },\r\n//                 { label: \"Alfredo\", y: 15 },\r\n//                 { label: \"Chicken\", y: 25 },\r\n//                 { label: \"Alfredo\", y: 30 },\r\n//                 { label: \"hahah\", y: 28 }\r\n//             ]\r\n//         }]\r\n//     }\r\n//     const options3 = {\r\n//         title: {\r\n//             text: \"Basic Column Chart in React\"\r\n//         },\r\n//         data: [{\r\n//             type: \"column\",\r\n//             dataPoints: [\r\n//                 { label: \"mane\", y: 10 },\r\n//                 { label: \"nei thry\", y: 15 },\r\n//                 { label: \"looordie\", y: 25 },\r\n//                 { label: \"yes\", y: 30 },\r\n//                 { label: \"ok\", y: 28 }\r\n//             ]\r\n//         }]\r\n//     }\r\n//     const options4 = {\r\n//         title: {\r\n//             text: \"Basic Column Chart in React\"\r\n//         },\r\n//         data: [{\r\n//             type: \"column\",\r\n//             dataPoints: [\r\n//                 { label: \"no link\", y: 10 },\r\n//                 { label: \"i wish this worked\", y: 15 },\r\n//                 { label: \"scik\", y: 25 },\r\n//                 { label: \"ifwo\", y: 30 },\r\n//                 { label: \"asdfasd\", y: 28 }\r\n//             ]\r\n//         }]\r\n//     }\r\n//     const graph1 = () => {\r\n//         return (\r\n//             <div>\r\n//                 <CanvasJSChart options={this.options1} />\r\n//             </div>\r\n//         );\r\n\r\n//     }\r\n\r\n//     const graph2 = () => {\r\n//         return (\r\n//             <div>\r\n//                 <CanvasJSChart options={options2} />\r\n//             </div>\r\n//         );\r\n\r\n//     }\r\n\r\n//     const graph3 = () => {\r\n//         return (\r\n//             <div>\r\n//                 <CanvasJSChart options={options3} />\r\n//             </div>\r\n//         );\r\n\r\n//     }\r\n\r\n//     const graph4 = () => {\r\n//         return (\r\n//             <div>\r\n//                 <CanvasJSChart options={options4} />\r\n//             </div>\r\n//         );\r\n\r\n//     }\r\n\r\n//     const a = 10;\r\n\r\n\r\n// }\r\n\r\n\r\n// export default Graphs;\r\n// gradeVStudentPS() {\r\n\r\n//     let titleParam = \"Student's Average Grade Over Time\";\r\n//     let graphTypeParam = \"line\";\r\n//     let xAxisUnit = \"Assignment\";\r\n//     let yAxisUnit = \"Average Grade\";\r\n//     let chart = this.chart;\r\n//     fetch(\"Our jason file\")\r\n//         .then(function (response) {\r\n//             return response.json();\r\n//         })\r\n//         .then(function (data) {\r\n//             for (let i = 0; i < data.classroom.students.assignments.assignmentName.length; i++) {\r\n//                 dataPoints.push({\r\n//                     x: data.classroom.students.assignments[i].assignmentName,\r\n//                     y: data.classroom.students.assignments[i].assignmentGrade\r\n//                 });\r\n//             }\r\n//             chart.render();\r\n//         });\r\n// }\r\n\r\n// avgGradeVsAssignment() {\r\n\r\n//     let titleParam = \"Average Grade Per Assignment\";\r\n//     let graphTypeParam = \"column\";\r\n//     let xAxisUnit = \"Assignment\";\r\n//     let yAxisUnit = \"Average Grade\";\r\n//     let chart = this.chart;\r\n//     fetch(\"Our jason file\")\r\n//         .then(function (response) {\r\n//             return response.json();\r\n//         })\r\n//         .then(function (data) {\r\n\r\n//             for (let i = 0; i < data.classroom.students.assignments.length; i++) {\r\n//                 let avgAssignGrade = 0;\r\n//                 for (let j = 0; j < data.classroom.students[j].length; i++) {\r\n//                     avgAssignGrade += data.classroom.students[j].assignements[i].assignmentGrade;\r\n//                 }\r\n//                 avgAssignGrade = avgAssignGrade / data.classroom.students.length;\r\n//                 dataPoints.push({\r\n//                     x: data.classroom.students.assignments[i].assignmentName,\r\n//                     y: avgGrade\r\n//                 });\r\n//             }\r\n//             chart.render();\r\n//         });\r\n// }\r\n\r\n// avgGradeVsClasses() {\r\n\r\n//     let titleParam = \"Average Grade Per Class\";\r\n//     let graphTypeParam = \"column\";\r\n//     let xAxisUnit = \"Class\";\r\n//     let yAxisUnit = \"Average Grade\";\r\n//     let chart = this.chart;\r\n//     fetch(\"Our jason file\")\r\n//         .then(function (response) {\r\n//             return response.json();\r\n//         })\r\n//         .then(function (data) {\r\n//             for (let i = 0; i < data.classroom.length; i++) {\r\n//                 let avgClassGrade = 0;\r\n//                 for (let j = 0; j < data.classroom[i].students.length; j++) {\r\n//                     avgClassGrade += data.classroom[i].students[j].averageGrade;\r\n//                 }\r\n//                 avgClassGrade = avgClassGrade / data.classroom[i].students;\r\n//                 dataPoints.push({\r\n//                     x: data.classroom[i].myClassName,\r\n//                     y: avgClassGrade\r\n//                 });\r\n//             }\r\n//             chart.render();\r\n//         });\r\n// };\r\n\r\n\r\n// improtantn\r\n// let chart = new CanvasJS.Chart(\"chartContainer\", {\r\n//     animationEnabled: true,\r\n//     theme: \"light\",\r\n//     title: {\r\n//         text: titleParam\r\n//     },\r\n//       axisX: {\r\n//         title: xAxisUnit,\r\n//     },\r\n//     axisY: {\r\n//         title: yAxisUnit,\r\n//     },\r\n//     data: [{\r\n//         type: graphTypeParam,\r\n//         yValueFormatString: \"#,### Units\",\r\n//         dataPoints: dataPoints\r\n//     }]\r\n// });\r\n\r\n// $.getJSON(/*\"How do i get this file from form.jsx lol?\"*/\"\", addData);\r\n\r\n// function gradeVStudentPS () {\r\n\r\n//     let titleParam = \"Student's Average Grade Over Time\";\r\n//     let graphTypeParam = \"line\";\r\n//     let xAxisUnit = \"Assignment\";\r\n//     let yAxisUnit = \"Average Grade\";\r\n//     function addData(data) {\r\n//         for (let i = 0; i < data.classroom.students.assignments.assignmentName.length; i++) {\r\n//             dataPoints.push({\r\n//                 x: data.classroom.students.assignments[i].assignmentName,\r\n//                 y: data.classroom.students.assignments[i].assignmentGrade\r\n//             });\r\n//         }\r\n//         chart.render();\r\n\r\n//     }\r\n\r\n// }\r\n\r\n// function avgGradeVsAssignment () {\r\n\r\n//     let titleParam = \"Average Grade Per Assignment\";\r\n//     let graphTypeParam = \"column\";\r\n//     let xAxisUnit = \"Assignment\";\r\n//     let yAxisUnit = \"Average Grade\";\r\n//     function addData(data) {\r\n//         for (let i = 0; i < data.classroom.students.assignments.length; i++) {\r\n//             let avgAssignGrade = 0;\r\n//             for(let j = 0; j < data.classroom.students[j].length; i++){\r\n//                 avgAssignGrade += data.classroom.students[j].assignements[i].assignmentGrade;\r\n//             }\r\n//             avgAssignGrade = avgAssignGrade / data.classroom.students.length;\r\n//             dataPoints.push({\r\n//                 x: data.classroom.students.assignments[i].assignmentName,\r\n//                 y: avgGrade\r\n//             });\r\n//         }\r\n//         chart.render();\r\n\r\n//     }\r\n\r\n// }\r\n\r\n// function avgGradeVsClasses () {\r\n\r\n//     let titleParam = \"Average Grade Per Class\";\r\n//     let graphTypeParam = \"column\";\r\n//     let xAxisUnit = \"Class\";\r\n//     let yAxisUnit = \"Average Grade\";\r\n//     function addData(data) {\r\n//         for (let i = 0; i < data.classroom.length; i++) {\r\n//             let avgClassGrade = 0;\r\n//             for(let j = 0; j < data.classroom[i].students.length; j++) {\r\n//                 avgClassGrade += data.classroom[i].students[j].averageGrade;\r\n//             }\r\n//             avgClassGrade = avgClassGrade / data.classroom[i].students;\r\n//             dataPoints.push({\r\n//                 x: data.classroom[i].myClassName,\r\n//                 y: avgClassGrade\r\n//             });\r\n//         }\r\n//         chart.render();\r\n\r\n//     }\r\n\r\n// }\r\n\r\n// function avgGradeOfAll () {\r\n\r\n//     let titleParam = \"Class' Average Grade Over Time\";\r\n//     let graphTypeParam = \"line\";\r\n//     let xAxisUnit = \"Assignment\";\r\n//     let yAxisUnit = \"Average Grade\";\r\n//     function addData(data) {\r\n//         for (let i = 0; i < data.classroom.students.assigments.length; i++) {\r\n//             let avgClassGrade = 0;\r\n//             for(let j = 0; j < data.classroom.students.length; i++) {\r\n//                 avgClassGrade += data.classroom.students.assigments[i].assignmentGrade;\r\n//             }\r\n//             avgClassGrade = avgClassGrade / data.classroom.students.length;\r\n//             dataPoints.push({\r\n//                 x: data.classroom.students.assigments[i].assignmentName,\r\n//                 y: avgClassGrade\r\n//             });\r\n//         }\r\n//         chart.render();\r\n\r\n//     }\r\n\r\n// }\r\n\r\n// this function will make the graphs for all of the above functions (just call them lmao)\r\n// function allGraphs () { \r\n\r\n//     gradeVStudentPS();\r\n//     avgGradeVsAssignment();\r\n//     avgGradeVsClasses();\r\n//     avgGradeOfAll();\r\n\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}