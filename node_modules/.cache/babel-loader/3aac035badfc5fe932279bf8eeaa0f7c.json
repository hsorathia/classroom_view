{"ast":null,"code":"var _jsxFileName = \"C:\\\\Habibi\\\\yikers_mane\\\\src\\\\components\\\\viewgraphs.jsx\";\n//import React, { Component } from 'react';\n//import { ReactComponent } from '*.svg';\nimport React, { Component } from 'react';\nimport CanvasJSReact from '../canvasjs.react'; //var CanvasJSReact = require('./canvasjs.react');\n\nvar CanvasJS = CanvasJSReact.CanvasJS;\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\nlet dataPoints = []; // classroom: [\n//     {\n//         id: 12312,\n//         myClassName: \"Class mane\",\n//         mentor: \"Joe Mentor\",\n//         students: [\n//             {\n//                 student: \"Billy Bob\",\n//                 averageGrade: \"94\",\n//                 assignments: [\n//                     {\n//                         assignmentName: \"homework 1\",\n//                         assignmentGrade: 94\n//                     }\n//                 ]\n//             },\n//             {\n//                 student: \"Billy Bob Joe\",\n//                 averageGrade: \"50\",\n//                 assignments: [\n//                     {\n//                         assignmentName: \"homework 1\",\n//                         assignmentGrade: 50\n//                     }\n//                 ]\n//             },\n//             {\n//                 student: \"John Bob Joe\",\n//                 averageGrade: \"120\",\n//                 assignments: [\n//                     {\n//                         assignmentName: \"homework 1\",\n//                         assignmentGrade: 120\n//                     }\n//                 ]\n//             }\n//         ]\n//     }\n// ]\n\nfunction graph1(props) {\n  const options = {\n    title: {\n      text: \"Basic Column Chart in React\"\n    },\n    data: [{\n      type: \"column\",\n      dataPoints: [{\n        label: \"Apple\",\n        y: 10\n      }, {\n        label: \"Orange\",\n        y: 15\n      }, {\n        label: \"Banana\",\n        y: 25\n      }, {\n        label: \"Mango\",\n        y: 30\n      }, {\n        label: \"Grape\",\n        y: 28\n      }]\n    }]\n  };\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(CanvasJSChart, {\n    options: options\n    /* onRef = {ref => this.chart = ref} */\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }));\n}\n\nfunction graph2(props) {\n  const options = {\n    title: {\n      text: \"Basic Column Chart in React\"\n    },\n    data: [{\n      type: \"column\",\n      dataPoints: [{\n        label: \"Chicken\",\n        y: 10\n      }, {\n        label: \"Alfredo\",\n        y: 15\n      }, {\n        label: \"Chicken\",\n        y: 25\n      }, {\n        label: \"Alfredo\",\n        y: 30\n      }, {\n        label: \"hahah\",\n        y: 28\n      }]\n    }]\n  };\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(CanvasJSChart, {\n    options: options\n    /* onRef = {ref => this.chart = ref} */\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }));\n}\n\nfunction graph3(props) {\n  const options = {\n    title: {\n      text: \"Basic Column Chart in React\"\n    },\n    data: [{\n      type: \"column\",\n      dataPoints: [{\n        label: \"no link\",\n        y: 10\n      }, {\n        label: \"i wish this worked\",\n        y: 15\n      }, {\n        label: \"scik\",\n        y: 25\n      }, {\n        label: \"ifwo\",\n        y: 30\n      }, {\n        label: \"asdfasd\",\n        y: 28\n      }]\n    }]\n  };\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, React.createElement(CanvasJSChart, {\n    options: options\n    /* onRef = {ref => this.chart = ref} */\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }));\n}\n\nfunction graph4(props) {\n  const options = {\n    title: {\n      text: \"Basic Column Chart in React\"\n    },\n    data: [{\n      type: \"column\",\n      dataPoints: [{\n        label: \"mane\",\n        y: 10\n      }, {\n        label: \"nei thry\",\n        y: 15\n      }, {\n        label: \"looordie\",\n        y: 25\n      }, {\n        label: \"yes\",\n        y: 30\n      }, {\n        label: \"ok\",\n        y: 28\n      }]\n    }]\n  };\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(CanvasJSChart, {\n    options: options\n    /* onRef = {ref => this.chart = ref} */\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }));\n}\n\nclass Graphs extends Component {\n  render() {\n    let a = 10;\n\n    if (a === 16) {\n      return graph1, graph2, graph3, graph4;\n    }\n\n    if (a === 15) {}\n\n    if (a === 14) {}\n\n    if (a === 13) {}\n\n    if (a === 12) {}\n\n    if (a === 11) {}\n\n    if (a === 10) {}\n\n    if (a === 9) {}\n\n    if (a === 8) {}\n\n    if (a === 7) {}\n\n    if (a === 6) {}\n\n    if (a === 5) {}\n\n    if (a === 4) {}\n\n    if (a === 3) {}\n\n    if (a === 2) {}\n\n    if (a === 1) {}\n\n    return graph1(this.props);\n  }\n\n}\n\nexport default Graphs; // gradeVStudentPS() {\n//     let titleParam = \"Student's Average Grade Over Time\";\n//     let graphTypeParam = \"line\";\n//     let xAxisUnit = \"Assignment\";\n//     let yAxisUnit = \"Average Grade\";\n//     let chart = this.chart;\n//     fetch(\"Our jason file\")\n//         .then(function (response) {\n//             return response.json();\n//         })\n//         .then(function (data) {\n//             for (let i = 0; i < data.classroom.students.assignments.assignmentName.length; i++) {\n//                 dataPoints.push({\n//                     x: data.classroom.students.assignments[i].assignmentName,\n//                     y: data.classroom.students.assignments[i].assignmentGrade\n//                 });\n//             }\n//             chart.render();\n//         });\n// }\n// avgGradeVsAssignment() {\n//     let titleParam = \"Average Grade Per Assignment\";\n//     let graphTypeParam = \"column\";\n//     let xAxisUnit = \"Assignment\";\n//     let yAxisUnit = \"Average Grade\";\n//     let chart = this.chart;\n//     fetch(\"Our jason file\")\n//         .then(function (response) {\n//             return response.json();\n//         })\n//         .then(function (data) {\n//             for (let i = 0; i < data.classroom.students.assignments.length; i++) {\n//                 let avgAssignGrade = 0;\n//                 for (let j = 0; j < data.classroom.students[j].length; i++) {\n//                     avgAssignGrade += data.classroom.students[j].assignements[i].assignmentGrade;\n//                 }\n//                 avgAssignGrade = avgAssignGrade / data.classroom.students.length;\n//                 dataPoints.push({\n//                     x: data.classroom.students.assignments[i].assignmentName,\n//                     y: avgGrade\n//                 });\n//             }\n//             chart.render();\n//         });\n// }\n// avgGradeVsClasses() {\n//     let titleParam = \"Average Grade Per Class\";\n//     let graphTypeParam = \"column\";\n//     let xAxisUnit = \"Class\";\n//     let yAxisUnit = \"Average Grade\";\n//     let chart = this.chart;\n//     fetch(\"Our jason file\")\n//         .then(function (response) {\n//             return response.json();\n//         })\n//         .then(function (data) {\n//             for (let i = 0; i < data.classroom.length; i++) {\n//                 let avgClassGrade = 0;\n//                 for (let j = 0; j < data.classroom[i].students.length; j++) {\n//                     avgClassGrade += data.classroom[i].students[j].averageGrade;\n//                 }\n//                 avgClassGrade = avgClassGrade / data.classroom[i].students;\n//                 dataPoints.push({\n//                     x: data.classroom[i].myClassName,\n//                     y: avgClassGrade\n//                 });\n//             }\n//             chart.render();\n//         });\n// };\n// improtantn\n// let chart = new CanvasJS.Chart(\"chartContainer\", {\n//     animationEnabled: true,\n//     theme: \"light\",\n//     title: {\n//         text: titleParam\n//     },\n//       axisX: {\n//         title: xAxisUnit,\n//     },\n//     axisY: {\n//         title: yAxisUnit,\n//     },\n//     data: [{\n//         type: graphTypeParam,\n//         yValueFormatString: \"#,### Units\",\n//         dataPoints: dataPoints\n//     }]\n// });\n// $.getJSON(/*\"How do i get this file from form.jsx lol?\"*/\"\", addData);\n// function gradeVStudentPS () {\n//     let titleParam = \"Student's Average Grade Over Time\";\n//     let graphTypeParam = \"line\";\n//     let xAxisUnit = \"Assignment\";\n//     let yAxisUnit = \"Average Grade\";\n//     function addData(data) {\n//         for (let i = 0; i < data.classroom.students.assignments.assignmentName.length; i++) {\n//             dataPoints.push({\n//                 x: data.classroom.students.assignments[i].assignmentName,\n//                 y: data.classroom.students.assignments[i].assignmentGrade\n//             });\n//         }\n//         chart.render();\n//     }\n// }\n// function avgGradeVsAssignment () {\n//     let titleParam = \"Average Grade Per Assignment\";\n//     let graphTypeParam = \"column\";\n//     let xAxisUnit = \"Assignment\";\n//     let yAxisUnit = \"Average Grade\";\n//     function addData(data) {\n//         for (let i = 0; i < data.classroom.students.assignments.length; i++) {\n//             let avgAssignGrade = 0;\n//             for(let j = 0; j < data.classroom.students[j].length; i++){\n//                 avgAssignGrade += data.classroom.students[j].assignements[i].assignmentGrade;\n//             }\n//             avgAssignGrade = avgAssignGrade / data.classroom.students.length;\n//             dataPoints.push({\n//                 x: data.classroom.students.assignments[i].assignmentName,\n//                 y: avgGrade\n//             });\n//         }\n//         chart.render();\n//     }\n// }\n// function avgGradeVsClasses () {\n//     let titleParam = \"Average Grade Per Class\";\n//     let graphTypeParam = \"column\";\n//     let xAxisUnit = \"Class\";\n//     let yAxisUnit = \"Average Grade\";\n//     function addData(data) {\n//         for (let i = 0; i < data.classroom.length; i++) {\n//             let avgClassGrade = 0;\n//             for(let j = 0; j < data.classroom[i].students.length; j++) {\n//                 avgClassGrade += data.classroom[i].students[j].averageGrade;\n//             }\n//             avgClassGrade = avgClassGrade / data.classroom[i].students;\n//             dataPoints.push({\n//                 x: data.classroom[i].myClassName,\n//                 y: avgClassGrade\n//             });\n//         }\n//         chart.render();\n//     }\n// }\n// function avgGradeOfAll () {\n//     let titleParam = \"Class' Average Grade Over Time\";\n//     let graphTypeParam = \"line\";\n//     let xAxisUnit = \"Assignment\";\n//     let yAxisUnit = \"Average Grade\";\n//     function addData(data) {\n//         for (let i = 0; i < data.classroom.students.assigments.length; i++) {\n//             let avgClassGrade = 0;\n//             for(let j = 0; j < data.classroom.students.length; i++) {\n//                 avgClassGrade += data.classroom.students.assigments[i].assignmentGrade;\n//             }\n//             avgClassGrade = avgClassGrade / data.classroom.students.length;\n//             dataPoints.push({\n//                 x: data.classroom.students.assigments[i].assignmentName,\n//                 y: avgClassGrade\n//             });\n//         }\n//         chart.render();\n//     }\n// }\n// this function will make the graphs for all of the above functions (just call them lmao)\n// function allGraphs () { \n//     gradeVStudentPS();\n//     avgGradeVsAssignment();\n//     avgGradeVsClasses();\n//     avgGradeOfAll();\n// }","map":{"version":3,"sources":["C:/Habibi/yikers_mane/src/components/viewgraphs.jsx"],"names":["React","Component","CanvasJSReact","CanvasJS","CanvasJSChart","dataPoints","graph1","props","options","title","text","data","type","label","y","graph2","graph3","graph4","Graphs","render","a"],"mappings":"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":["//import React, { Component } from 'react';\r\n//import { ReactComponent } from '*.svg';\r\n\r\nimport React, { Component } from 'react';\r\nimport CanvasJSReact from '../canvasjs.react';\r\n//var CanvasJSReact = require('./canvasjs.react');\r\nvar CanvasJS = CanvasJSReact.CanvasJS;\r\nvar CanvasJSChart = CanvasJSReact.CanvasJSChart;\r\nlet dataPoints = [];\r\n\r\n\r\n// classroom: [\r\n//     {\r\n//         id: 12312,\r\n//         myClassName: \"Class mane\",\r\n//         mentor: \"Joe Mentor\",\r\n//         students: [\r\n//             {\r\n//                 student: \"Billy Bob\",\r\n//                 averageGrade: \"94\",\r\n//                 assignments: [\r\n//                     {\r\n//                         assignmentName: \"homework 1\",\r\n//                         assignmentGrade: 94\r\n//                     }\r\n//                 ]\r\n//             },\r\n//             {\r\n//                 student: \"Billy Bob Joe\",\r\n//                 averageGrade: \"50\",\r\n//                 assignments: [\r\n//                     {\r\n//                         assignmentName: \"homework 1\",\r\n//                         assignmentGrade: 50\r\n//                     }\r\n//                 ]\r\n//             },\r\n//             {\r\n//                 student: \"John Bob Joe\",\r\n//                 averageGrade: \"120\",\r\n//                 assignments: [\r\n//                     {\r\n//                         assignmentName: \"homework 1\",\r\n//                         assignmentGrade: 120\r\n//                     }\r\n//                 ]\r\n//             }\r\n//         ]\r\n//     }\r\n// ]\r\n\r\nfunction graph1(props) {\r\n    const options = {\r\n        title: {\r\n            text: \"Basic Column Chart in React\"\r\n        },\r\n        data: [{\r\n            type: \"column\",\r\n            dataPoints: [\r\n                { label: \"Apple\", y: 10 },\r\n                { label: \"Orange\", y: 15 },\r\n                { label: \"Banana\", y: 25 },\r\n                { label: \"Mango\", y: 30 },\r\n                { label: \"Grape\", y: 28 }\r\n            ]\r\n        }]\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <CanvasJSChart options={options}\r\n            /* onRef = {ref => this.chart = ref} */\r\n            />\r\n        </div>\r\n    );\r\n}\r\nfunction graph2(props) {\r\n    const options = {\r\n        title: {\r\n            text: \"Basic Column Chart in React\"\r\n        },\r\n        data: [{\r\n            type: \"column\",\r\n            dataPoints: [\r\n                { label: \"Chicken\", y: 10 },\r\n                { label: \"Alfredo\", y: 15 },\r\n                { label: \"Chicken\", y: 25 },\r\n                { label: \"Alfredo\", y: 30 },\r\n                { label: \"hahah\", y: 28 }\r\n            ]\r\n        }]\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <CanvasJSChart options={options}\r\n            /* onRef = {ref => this.chart = ref} */\r\n            />\r\n        </div>\r\n    );\r\n}\r\nfunction graph3(props) {\r\n    const options = {\r\n        title: {\r\n            text: \"Basic Column Chart in React\"\r\n        },\r\n        data: [{\r\n            type: \"column\",\r\n            dataPoints: [\r\n                { label: \"no link\", y: 10 },\r\n                { label: \"i wish this worked\", y: 15 },\r\n                { label: \"scik\", y: 25 },\r\n                { label: \"ifwo\", y: 30 },\r\n                { label: \"asdfasd\", y: 28 }\r\n            ]\r\n        }]\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <CanvasJSChart options={options}\r\n            /* onRef = {ref => this.chart = ref} */\r\n            />\r\n        </div>\r\n    );\r\n}\r\nfunction graph4(props) {\r\n    const options = {\r\n        title: {\r\n            text: \"Basic Column Chart in React\"\r\n        },\r\n        data: [{\r\n            type: \"column\",\r\n            dataPoints: [\r\n                { label: \"mane\", y: 10 },\r\n                { label: \"nei thry\", y: 15 },\r\n                { label: \"looordie\", y: 25 },\r\n                { label: \"yes\", y: 30 },\r\n                { label: \"ok\", y: 28 }\r\n            ]\r\n        }]\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <CanvasJSChart options={options}\r\n            /* onRef = {ref => this.chart = ref} */\r\n            />\r\n        </div>\r\n    );\r\n}\r\nclass Graphs extends Component {\r\n\r\n    render() {\r\n        let a = 10;\r\n        if (a === 16) {\r\n            return (graph1, graph2, graph3, graph4);\r\n\r\n        }\r\n        if (a === 15) {\r\n\r\n        }\r\n        if (a === 14) {\r\n\r\n        }\r\n        if (a === 13) {\r\n\r\n        }\r\n        if (a === 12) {\r\n\r\n        }\r\n        if (a === 11) {\r\n\r\n        }\r\n        if (a === 10) {\r\n\r\n        }\r\n        if (a === 9) {\r\n\r\n        }\r\n        if (a === 8) {\r\n\r\n        }\r\n        if (a === 7) {\r\n\r\n        }\r\n        if (a === 6) {\r\n\r\n        }\r\n        if (a === 5) {\r\n\r\n        }\r\n        if (a === 4) {\r\n\r\n        }\r\n        if (a === 3) {\r\n\r\n        }\r\n        if (a === 2) {\r\n\r\n        }\r\n        if (a === 1) {\r\n\r\n        }\r\n\r\n\r\n\r\n        return (graph1(this.props));\r\n    }\r\n}\r\n\r\nexport default Graphs;\r\n// gradeVStudentPS() {\r\n\r\n//     let titleParam = \"Student's Average Grade Over Time\";\r\n//     let graphTypeParam = \"line\";\r\n//     let xAxisUnit = \"Assignment\";\r\n//     let yAxisUnit = \"Average Grade\";\r\n//     let chart = this.chart;\r\n//     fetch(\"Our jason file\")\r\n//         .then(function (response) {\r\n//             return response.json();\r\n//         })\r\n//         .then(function (data) {\r\n//             for (let i = 0; i < data.classroom.students.assignments.assignmentName.length; i++) {\r\n//                 dataPoints.push({\r\n//                     x: data.classroom.students.assignments[i].assignmentName,\r\n//                     y: data.classroom.students.assignments[i].assignmentGrade\r\n//                 });\r\n//             }\r\n//             chart.render();\r\n//         });\r\n// }\r\n\r\n// avgGradeVsAssignment() {\r\n\r\n//     let titleParam = \"Average Grade Per Assignment\";\r\n//     let graphTypeParam = \"column\";\r\n//     let xAxisUnit = \"Assignment\";\r\n//     let yAxisUnit = \"Average Grade\";\r\n//     let chart = this.chart;\r\n//     fetch(\"Our jason file\")\r\n//         .then(function (response) {\r\n//             return response.json();\r\n//         })\r\n//         .then(function (data) {\r\n\r\n//             for (let i = 0; i < data.classroom.students.assignments.length; i++) {\r\n//                 let avgAssignGrade = 0;\r\n//                 for (let j = 0; j < data.classroom.students[j].length; i++) {\r\n//                     avgAssignGrade += data.classroom.students[j].assignements[i].assignmentGrade;\r\n//                 }\r\n//                 avgAssignGrade = avgAssignGrade / data.classroom.students.length;\r\n//                 dataPoints.push({\r\n//                     x: data.classroom.students.assignments[i].assignmentName,\r\n//                     y: avgGrade\r\n//                 });\r\n//             }\r\n//             chart.render();\r\n//         });\r\n// }\r\n\r\n// avgGradeVsClasses() {\r\n\r\n//     let titleParam = \"Average Grade Per Class\";\r\n//     let graphTypeParam = \"column\";\r\n//     let xAxisUnit = \"Class\";\r\n//     let yAxisUnit = \"Average Grade\";\r\n//     let chart = this.chart;\r\n//     fetch(\"Our jason file\")\r\n//         .then(function (response) {\r\n//             return response.json();\r\n//         })\r\n//         .then(function (data) {\r\n//             for (let i = 0; i < data.classroom.length; i++) {\r\n//                 let avgClassGrade = 0;\r\n//                 for (let j = 0; j < data.classroom[i].students.length; j++) {\r\n//                     avgClassGrade += data.classroom[i].students[j].averageGrade;\r\n//                 }\r\n//                 avgClassGrade = avgClassGrade / data.classroom[i].students;\r\n//                 dataPoints.push({\r\n//                     x: data.classroom[i].myClassName,\r\n//                     y: avgClassGrade\r\n//                 });\r\n//             }\r\n//             chart.render();\r\n//         });\r\n// };\r\n\r\n\r\n// improtantn\r\n// let chart = new CanvasJS.Chart(\"chartContainer\", {\r\n//     animationEnabled: true,\r\n//     theme: \"light\",\r\n//     title: {\r\n//         text: titleParam\r\n//     },\r\n//       axisX: {\r\n//         title: xAxisUnit,\r\n//     },\r\n//     axisY: {\r\n//         title: yAxisUnit,\r\n//     },\r\n//     data: [{\r\n//         type: graphTypeParam,\r\n//         yValueFormatString: \"#,### Units\",\r\n//         dataPoints: dataPoints\r\n//     }]\r\n// });\r\n\r\n// $.getJSON(/*\"How do i get this file from form.jsx lol?\"*/\"\", addData);\r\n\r\n// function gradeVStudentPS () {\r\n\r\n//     let titleParam = \"Student's Average Grade Over Time\";\r\n//     let graphTypeParam = \"line\";\r\n//     let xAxisUnit = \"Assignment\";\r\n//     let yAxisUnit = \"Average Grade\";\r\n//     function addData(data) {\r\n//         for (let i = 0; i < data.classroom.students.assignments.assignmentName.length; i++) {\r\n//             dataPoints.push({\r\n//                 x: data.classroom.students.assignments[i].assignmentName,\r\n//                 y: data.classroom.students.assignments[i].assignmentGrade\r\n//             });\r\n//         }\r\n//         chart.render();\r\n\r\n//     }\r\n\r\n// }\r\n\r\n// function avgGradeVsAssignment () {\r\n\r\n//     let titleParam = \"Average Grade Per Assignment\";\r\n//     let graphTypeParam = \"column\";\r\n//     let xAxisUnit = \"Assignment\";\r\n//     let yAxisUnit = \"Average Grade\";\r\n//     function addData(data) {\r\n//         for (let i = 0; i < data.classroom.students.assignments.length; i++) {\r\n//             let avgAssignGrade = 0;\r\n//             for(let j = 0; j < data.classroom.students[j].length; i++){\r\n//                 avgAssignGrade += data.classroom.students[j].assignements[i].assignmentGrade;\r\n//             }\r\n//             avgAssignGrade = avgAssignGrade / data.classroom.students.length;\r\n//             dataPoints.push({\r\n//                 x: data.classroom.students.assignments[i].assignmentName,\r\n//                 y: avgGrade\r\n//             });\r\n//         }\r\n//         chart.render();\r\n\r\n//     }\r\n\r\n// }\r\n\r\n// function avgGradeVsClasses () {\r\n\r\n//     let titleParam = \"Average Grade Per Class\";\r\n//     let graphTypeParam = \"column\";\r\n//     let xAxisUnit = \"Class\";\r\n//     let yAxisUnit = \"Average Grade\";\r\n//     function addData(data) {\r\n//         for (let i = 0; i < data.classroom.length; i++) {\r\n//             let avgClassGrade = 0;\r\n//             for(let j = 0; j < data.classroom[i].students.length; j++) {\r\n//                 avgClassGrade += data.classroom[i].students[j].averageGrade;\r\n//             }\r\n//             avgClassGrade = avgClassGrade / data.classroom[i].students;\r\n//             dataPoints.push({\r\n//                 x: data.classroom[i].myClassName,\r\n//                 y: avgClassGrade\r\n//             });\r\n//         }\r\n//         chart.render();\r\n\r\n//     }\r\n\r\n// }\r\n\r\n// function avgGradeOfAll () {\r\n\r\n//     let titleParam = \"Class' Average Grade Over Time\";\r\n//     let graphTypeParam = \"line\";\r\n//     let xAxisUnit = \"Assignment\";\r\n//     let yAxisUnit = \"Average Grade\";\r\n//     function addData(data) {\r\n//         for (let i = 0; i < data.classroom.students.assigments.length; i++) {\r\n//             let avgClassGrade = 0;\r\n//             for(let j = 0; j < data.classroom.students.length; i++) {\r\n//                 avgClassGrade += data.classroom.students.assigments[i].assignmentGrade;\r\n//             }\r\n//             avgClassGrade = avgClassGrade / data.classroom.students.length;\r\n//             dataPoints.push({\r\n//                 x: data.classroom.students.assigments[i].assignmentName,\r\n//                 y: avgClassGrade\r\n//             });\r\n//         }\r\n//         chart.render();\r\n\r\n//     }\r\n\r\n// }\r\n\r\n// this function will make the graphs for all of the above functions (just call them lmao)\r\n// function allGraphs () { \r\n\r\n//     gradeVStudentPS();\r\n//     avgGradeVsAssignment();\r\n//     avgGradeVsClasses();\r\n//     avgGradeOfAll();\r\n\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}